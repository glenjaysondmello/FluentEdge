import * as admin from 'firebase-admin';
admin.initializeApp({
  credential: admin.credential.cert({
    projectId: "YOUR_PROJECT_ID",
    clientEmail: "YOUR_CLIENT_EMAIL",
    privateKey: "YOUR_PRIVATE_KEY".replace(/\\n/g, '\n'),
  }),
});


import { Request, Response, NextFunction } from 'express';
import admin from '../firebase/firebase.service';

export const verifyFirebaseToken = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  const token = req.headers.authorization?.split('Bearer ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Unauthorized :No token provided' });
  }

  try {
    const decodedToken = await admin.auth().verifyIdToken(token);
    req['user'] = decodedToken;
    next();
  } catch (error) {
    console.error('Firebase token verification error:', error);
    return res.status(401).json({ error: 'Unauthorized' });
  }
};


import { Module, MiddlewareConsumer, NestModule } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { ConfigModule } from '@nestjs/config';
import { MongooseModule } from '@nestjs/mongoose';
import { join } from 'path';
import { FileModule } from './file/file.module';
import { verifyFirebaseToken } from './middleware/firebase-auth.middleware';

@Module({
  imports: [
    ConfigModule.forRoot(),
    MongooseModule.forRoot(process.env.MONGO_URI || ''),
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
      playground: true,
      introspection: true,
    }),
    FileModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer.apply(verifyFirebaseToken).forRoutes('*');
  }
}

//needed for storage Files

// src/file/file.service.ts
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { File } from './file.schema';
import { Model } from 'mongoose';
import { CloudinaryService } from '../cloudinary/cloudinary.service';

@Injectable()
export class FileService {
  constructor(
    @InjectModel(File.name) private fileModel: Model<File>,
    private readonly cloudinaryService: CloudinaryService,
  ) {}

  async uploadFile(file: Express.Multer.File, input: any, ownerId: string): Promise<File> {
    const url = await this.cloudinaryService.uploadFile(file);

    const createdFile = new this.fileModel({
      owner: ownerId,
      url,
      name: input.name,
      password: input.password,
      expiresAt: input.expiresAt,
      downloadLimit: input.downloadLimit,
    });

    return createdFile.save();
  }

  // other methods...
}


////


import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _checkAuth();
  }

  Future<void> _checkAuth() async {
    final nav = Navigator.of(context);

    await Future.delayed(const Duration(seconds: 2));
    final user = FirebaseAuth.instance.currentUser;

    if (user != null) {
      nav.pushReplacementNamed('/home');
    } else {
      nav.pushReplacementNamed('/auth');
    }
  }

  @override
  Widget build(BuildContext context) {
    return const Scaffold(body: Center(child: CircularProgressIndicator()));
  }
}
